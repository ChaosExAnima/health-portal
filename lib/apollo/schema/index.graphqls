# import Claim from './types.graphqls'
# import Note from './types.graphqls'
# import Provider from './types.graphqls'
# import Call from './types.graphqls'
# import Appeal from './types.graphqls'
# import Upload from './scalars.graphqls'

interface PaginatedQuery {
	totalCount: Int!
	offset: Int!
	limit: Int!
}

type ClaimsResponse implements PaginatedQuery {
	claims: [Claim!]!
	totalCount: Int!
	offset: Int!
	limit: Int!
}

type ProvidersResponse implements PaginatedQuery {
	providers: [Provider!]!
	totalCount: Int!
	offset: Int!
	limit: Int!
}

type CallsResponse implements PaginatedQuery {
	calls: [Call!]!
	totalCount: Int!
	offset: Int!
	limit: Int!
}

type AppealsResponse implements PaginatedQuery {
	appeals: [Appeal!]!
	totalCount: Int!
	offset: Int!
	limit: Int!
}

enum Type {
	CLAIM
	APPEAL
	PROVIDER
}

type Query {
	getAppeals(offset: Int, limit: Int): AppealsResponse!
	appeal(slug: String!): Appeal
	getCalls(offset: Int, limit: Int): CallsResponse!
	call(slug: String): Call
	getClaims(offset: Int, limit: Int): ClaimsResponse!
	claim(slug: String!): Claim
	getProviders(offset: Int, limit: Int): ProvidersResponse!
	provider(slug: String!): Provider
	history(type: Type!, id: ID!, offset: Int, limit: Int ): [Note!]
}

interface MutationResponse {
	code: String!
	success: Boolean!
}

type UploadClaimsResponse implements MutationResponse {
	code: String!
	success: Boolean!
	claimsProcessed: Int
	errors: [String]
}

type Mutation {
	uploadClaims( file: Upload! ): UploadClaimsResponse!
}
